[
  {
    "id": 1,
    "title": "js 模拟 new 运算符实现的过程",
    "date": "2023-04-07T13:37:18Z",
    "tags": [],
    "authors": {
      "name": "lzwdot",
      "url": "https://github.com/lzwdot",
      "image_url": "https://avatars.githubusercontent.com/u/24477920?v=4"
    },
    "comments": 0,
    "description": "",
    "content": "今天来聊一聊 js 的 `new` 运算符，首先我们来看一段代码：\r\n\r\n``` js \r\nfunction Car(make, model, year) {\r\n  this.make = make;\r\n  this.model = model;\r\n  this.year = year;\r\n}\r\nconst car1 = new Car('Eagle', 'Talon TSi', 1993);\r\nconsole.log(car1.make);\r\n```\r\n\r\n以上使用到了 `new` 关键字，那么 `new` 到底做了些什么操作？\r\n\r\n1. 首先，`new` 创建一个空的简单JavaScript对象（即`{}`）\r\n2. 接着，链接该对象（即设置该对象的构造函数）到另一个对象\r\n3. 然后，将步骤1新创建的对象作为`this`的上下文\r\n4. 最后，如果该函数没有返回对象，则返回`this`\r\n\r\n既然我们知道了`new`都做了些什么，下面我们自己来模拟下操作过程：\r\n\r\n``` js \r\nfunction jsNew(obj, ...args) {\r\n    //1、创建空对象\r\n    let o = {}\r\n    //2、空对象原型指向构造函数obj的prototype\r\n    o.__proto__ = obj.prototype\r\n    // let o = Object.create(obj.prototype)\r\n    //3、将obj的this指向空对象o\r\n    let res = obj.apply(o, args)\r\n    //4、该函数没有返回对象，则返回this\r\n    return typeof res === 'object' ? res : o\r\n}\r\nconst car2 = jsNew(Car,'Eagle', 'Talon TSi', 1993);\r\nconsole.log(car2.make);\r\n```\r\n\r\n可以测试下，以上两个执行的结果都是：\"Eagle\""
  }
]